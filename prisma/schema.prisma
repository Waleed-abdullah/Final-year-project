generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model availability {
  availability_id String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  trainer_id      String?        @db.Uuid
  weekday         String?        @db.VarChar(10)
  start_time      DateTime?      @db.Time(6)
  end_time        DateTime?      @db.Time(6)
  waza_trainers   waza_trainers? @relation(fields: [trainer_id], references: [trainer_id], onDelete: NoAction, onUpdate: NoAction)
}

model certifications {
  certification_id       String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certification_name     String                   @db.VarChar(255)
  issuing_body           String?                  @db.VarChar(255)
  date_issued            DateTime?                @db.Date
  valid_until            DateTime?                @db.Date
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @db.Timestamp(6)
  trainer_certifications trainer_certifications[]
}

model chat {
  chat_id                       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sender_id                     String   @db.Uuid
  receiver_id                   String   @db.Uuid
  message_content               String
  timestamp                     DateTime @default(now()) @db.Timestamp(6)
  read_status                   Boolean
  users_chat_receiver_idTousers users    @relation("chat_receiver_idTousers", fields: [receiver_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  users_chat_sender_idTousers   users    @relation("chat_sender_idTousers", fields: [sender_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([read_status], map: "idx_chat_read_status")
}

model exercise {
  exercise_id     String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title           String            @db.VarChar(255)
  description     String?
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @db.Timestamp(6)
  trainer_id      String?           @db.Uuid
  muscle_group    String?           @db.VarChar(255)
  weight          Int?
  sets            Int?
  reps            Int?
  session_id      String            @db.Uuid
  waza_trainers   waza_trainers?    @relation(fields: [trainer_id], references: [trainer_id], onDelete: NoAction, onUpdate: NoAction)
  session         session           @relation(fields: [session_id], references: [session_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_session")
  exercise_log    exercise_log[]
  warriorexercise warriorexercise[]
}

model goals {
  goal_id      String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  goal_name    String         @db.VarChar(255)
  warriorgoals warriorgoals[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id     String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  warrior_id    String?        @db.Uuid
  trainer_id    String?        @db.Uuid
  rating        Int?
  comment       String?
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  waza_trainers waza_trainers? @relation(fields: [trainer_id], references: [trainer_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors waza_warriors? @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model session {
  session_id     String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  warrior_id     String?        @db.Uuid
  trainer_id     String?        @db.Uuid
  scheduled_date DateTime?      @db.Timestamp(6)
  status         String?        @db.VarChar(50)
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  updated_at     DateTime?      @db.Timestamp(6)
  exercise       exercise[]
  waza_trainers  waza_trainers? @relation(fields: [trainer_id], references: [trainer_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors  waza_warriors? @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_session_status")
}

model specializations {
  specialization_id       String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  specialization_name     String                    @db.VarChar(255)
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @db.Timestamp(6)
  trainer_specializations trainer_specializations[]
  warrior_specializations warrior_specializations[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  user_id                              String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                             String         @unique(map: "unique_username") @db.VarChar(255)
  password                             String?        @db.VarChar(255)
  email                                String         @unique(map: "unique_email") @db.VarChar(255)
  user_type                            String         @db.VarChar(50)
  profile_pic                          String?
  date_joined                          DateTime       @default(now()) @db.Timestamp(6)
  last_login                           DateTime?      @db.Timestamp(6)
  created_at                           DateTime       @default(now()) @db.Timestamp(6)
  updated_at                           DateTime       @default(now()) @db.Timestamp(6)
  is_verified                          Boolean        @default(false)
  provider                             String         @db.VarChar(50)
  age                                  Int?
  name                                 String?        @db.VarChar(255)
  gender                               String?        @db.VarChar(6)
  chat_chat_receiver_idTousers         chat[]         @relation("chat_receiver_idTousers")
  chat_chat_sender_idTousers           chat[]         @relation("chat_sender_idTousers")
  chat_list_chat_list_user_id_1Tousers chat_list[]    @relation("chat_list_user_id_1Tousers")
  chat_list_chat_list_user_id_2Tousers chat_list[]    @relation("chat_list_user_id_2Tousers")
  waza_trainers                        waza_trainers?
  waza_warriors                        waza_warriors?

  @@index([email], map: "idx_users_email")
}

model warriorexercise {
  warrior_id    String        @db.Uuid
  exercise_id   String        @db.Uuid
  exercise      exercise      @relation(fields: [exercise_id], references: [exercise_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors waza_warriors @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([warrior_id, exercise_id])
}

model warriorgoals {
  warrior_id    String        @db.Uuid
  goal_id       String        @db.Uuid
  goals         goals         @relation(fields: [goal_id], references: [goal_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors waza_warriors @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([warrior_id, goal_id])
}

model waza_warriors {
  warrior_id              String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                 String?                   @unique(map: "unique_user_id") @db.Uuid
  age                     Int?
  caloric_goal            Float?
  meals                   meals[]
  reviews                 reviews[]
  session                 session[]
  template                template[]
  warrior_specializations warrior_specializations[]
  warriorexercise         warriorexercise[]
  warriorgoals            warriorgoals[]
  users                   users?                    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model warrior_specializations {
  warrior_id        String          @db.Uuid
  specialization_id String          @db.Uuid
  specializations   specializations @relation(fields: [specialization_id], references: [specialization_id], onDelete: Cascade, onUpdate: NoAction)
  waza_warriors     waza_warriors   @relation(fields: [warrior_id], references: [warrior_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([warrior_id, specialization_id])
}

model waza_trainers {
  trainer_id              String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                 String                    @unique(map: "unique_trainer_user_id") @db.Uuid
  hourly_rate             Decimal                   @db.Decimal
  bio                     String
  location                String                    @db.VarChar(255)
  experience              Int?
  availability            availability[]
  exercise                exercise[]
  reviews                 reviews[]
  session                 session[]
  trainer_certifications  trainer_certifications[]
  trainer_specializations trainer_specializations[]
  users                   users                     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "waza_trainers_user_id_fkey")
}

model trainer_certifications {
  trainer_id       String         @db.Uuid
  certification_id String         @db.Uuid
  certifications   certifications @relation(fields: [certification_id], references: [certification_id], onDelete: NoAction, onUpdate: NoAction)
  waza_trainers    waza_trainers  @relation(fields: [trainer_id], references: [trainer_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([trainer_id, certification_id])
}

model trainer_specializations {
  trainer_id        String          @db.Uuid
  specialization_id String          @db.Uuid
  specializations   specializations @relation(fields: [specialization_id], references: [specialization_id], onDelete: NoAction, onUpdate: NoAction)
  waza_trainers     waza_trainers   @relation(fields: [trainer_id], references: [trainer_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([trainer_id, specialization_id])
}

model meal_food_items {
  meal_id              String   @db.Uuid
  food_item_identifier String   @db.VarChar(255)
  quantity             Decimal  @db.Decimal
  created_at           DateTime @default(now()) @db.Timestamptz(6)
  updated_at           DateTime @default(now()) @db.Timestamptz(6)
  unit                 String   @db.VarChar(50)
  meals                meals    @relation(fields: [meal_id], references: [meal_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([meal_id, food_item_identifier])
}

model meal_types {
  meal_type_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String   @unique @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
  meals        meals[]
}

model meals {
  meal_id         String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  warrior_id      String            @db.Uuid
  meal_type_id    String            @db.Uuid
  meal_date       DateTime          @db.Date
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  meal_food_items meal_food_items[]
  meal_types      meal_types        @relation(fields: [meal_type_id], references: [meal_type_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors   waza_warriors     @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([warrior_id, meal_type_id, meal_date])
}

model exercise_log {
  log_id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  exercise_id   String   @db.Uuid
  weight        Int?
  achieved_reps Int?
  exercise      exercise @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_exercise")
}

model template {
  template_id       String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  warrior_id        String?             @db.Uuid
  title             String              @unique @db.VarChar(255)
  description       String
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  waza_warriors     waza_warriors?      @relation(fields: [warrior_id], references: [warrior_id], onDelete: Cascade, onUpdate: NoAction)
  template_exercise template_exercise[]
}

model template_exercise {
  template_exercise_id String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  template_id          String?   @db.Uuid
  title                String    @db.VarChar(255)
  muscle_group         String    @db.VarChar(255)
  weight               Int
  sets                 Int
  reps                 Int
  template             template? @relation(fields: [template_id], references: [template_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_template")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model chat_list {
  user_id_1                        String @db.Uuid
  user_id_2                        String @db.Uuid
  status                           String @default("pending") @db.VarChar(50)
  chat_list_id                     String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  users_chat_list_user_id_1Tousers users  @relation("chat_list_user_id_1Tousers", fields: [user_id_1], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  users_chat_list_user_id_2Tousers users  @relation("chat_list_user_id_2Tousers", fields: [user_id_2], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id_1, user_id_2], map: "chat_list_unique_users")
}

enum friend_status {
  pending
  accepted
  rejected
  blocked
}
