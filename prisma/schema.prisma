generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model availability {
  availability_id String        @id @db.Uuid
  master_id       String?       @db.Uuid
  weekday         String?       @db.VarChar(10)
  start_time      DateTime?     @db.Time(6)
  end_time        DateTime?     @db.Time(6)
  waza_masters    waza_masters? @relation(fields: [master_id], references: [master_id], onDelete: NoAction, onUpdate: NoAction)
}

model certifications {
  certification_id     String                 @id @db.Uuid
  certification_name   String                 @db.VarChar(255)
  issuing_body         String?                @db.VarChar(255)
  date_issued          DateTime?              @db.Date
  valid_until          DateTime?              @db.Date
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @db.Timestamp(6)
  mastercertifications mastercertifications[]
}

model chat {
  chat_id                       String   @id @db.Uuid
  sender_id                     String?  @db.Uuid
  receiver_id                   String?  @db.Uuid
  message_content               String?
  timestamp                     DateTime @default(now()) @db.Timestamp(6)
  read_status                   Boolean?
  users_chat_receiver_idTousers users?   @relation("chat_receiver_idTousers", fields: [receiver_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  users_chat_sender_idTousers   users?   @relation("chat_sender_idTousers", fields: [sender_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([read_status], map: "idx_chat_read_status")
}

model exercise {
  exercise_id     String                   @id @db.Uuid
  title           String                   @db.VarChar(255)
  description     String?
  duration        Unsupported("interval")?
  created_at      DateTime                 @default(now()) @db.Timestamp(6)
  updated_at      DateTime?                @db.Timestamp(6)
  master_id       String?                  @db.Uuid
  waza_masters    waza_masters?            @relation(fields: [master_id], references: [master_id], onDelete: NoAction, onUpdate: NoAction)
  session         session[]
  warriorexercise warriorexercise[]
}

model goals {
  goal_id      String         @id @db.Uuid
  goal_name    String         @db.VarChar(255)
  warriorgoals warriorgoals[]
}

model mastercertifications {
  master_id        String         @db.Uuid
  certification_id String         @db.Uuid
  certifications   certifications @relation(fields: [certification_id], references: [certification_id], onDelete: NoAction, onUpdate: NoAction)
  waza_masters     waza_masters   @relation(fields: [master_id], references: [master_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([master_id, certification_id])
}

model masterspecializations {
  master_id         String          @db.Uuid
  specialization_id String          @db.Uuid
  waza_masters      waza_masters    @relation(fields: [master_id], references: [master_id], onDelete: NoAction, onUpdate: NoAction)
  specializations   specializations @relation(fields: [specialization_id], references: [specialization_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([master_id, specialization_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id     String         @id @db.Uuid
  warrior_id    String?        @db.Uuid
  master_id     String?        @db.Uuid
  rating        Int?
  comment       String?
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  waza_masters  waza_masters?  @relation(fields: [master_id], references: [master_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors waza_warriors? @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model session {
  session_id     String         @id @db.Uuid
  warrior_id     String?        @db.Uuid
  master_id      String?        @db.Uuid
  exercise_id    String?        @db.Uuid
  scheduled_date DateTime?      @db.Timestamp(6)
  status         String?        @db.VarChar(50)
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  updated_at     DateTime?      @db.Timestamp(6)
  exercise       exercise?      @relation(fields: [exercise_id], references: [exercise_id], onDelete: NoAction, onUpdate: NoAction)
  waza_masters   waza_masters?  @relation(fields: [master_id], references: [master_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors  waza_warriors? @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_session_status")
}

model specializations {
  specialization_id     String                  @id @db.Uuid
  specialization_name   String                  @db.VarChar(255)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @db.Timestamp(6)
  masterspecializations masterspecializations[]
  waza_warriors         waza_warriors[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  user_id                      String          @id @db.Uuid
  username                     String          @db.VarChar(255)
  password                     String          @db.VarChar(255)
  email                        String          @db.VarChar(255)
  user_type                    String?         @db.VarChar(50)
  profile_pic                  String?
  date_joined                  DateTime        @default(now()) @db.Timestamp(6)
  last_login                   DateTime?       @db.Timestamp(6)
  created_at                   DateTime        @default(now()) @db.Timestamp(6)
  updated_at                   DateTime        @default(now()) @db.Timestamp(6)
  chat_chat_receiver_idTousers chat[]          @relation("chat_receiver_idTousers")
  chat_chat_sender_idTousers   chat[]          @relation("chat_sender_idTousers")
  waza_masters                 waza_masters[]
  waza_warriors                waza_warriors[]

  @@index([email], map: "idx_users_email")
}

model warriorexercise {
  warrior_id    String        @db.Uuid
  exercise_id   String        @db.Uuid
  exercise      exercise      @relation(fields: [exercise_id], references: [exercise_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors waza_warriors @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([warrior_id, exercise_id])
}

model warriorgoals {
  warrior_id    String        @db.Uuid
  goal_id       String        @db.Uuid
  goals         goals         @relation(fields: [goal_id], references: [goal_id], onDelete: NoAction, onUpdate: NoAction)
  waza_warriors waza_warriors @relation(fields: [warrior_id], references: [warrior_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([warrior_id, goal_id])
}

model waza_masters {
  master_id             String                  @id @db.Uuid
  user_id               String?                 @db.Uuid
  hourly_rate           Decimal?                @db.Decimal
  bio                   String?
  location              String?                 @db.VarChar(255)
  availability          availability[]
  exercise              exercise[]
  mastercertifications  mastercertifications[]
  masterspecializations masterspecializations[]
  reviews               reviews[]
  session               session[]
  users                 users?                  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model waza_warriors {
  warrior_id            String            @id @db.Uuid
  user_id               String?           @db.Uuid
  preferred_master_type String?           @db.Uuid
  reviews               reviews[]
  session               session[]
  warriorexercise       warriorexercise[]
  warriorgoals          warriorgoals[]
  specializations       specializations?  @relation(fields: [preferred_master_type], references: [specialization_id], onDelete: NoAction, onUpdate: NoAction)
  users                 users?            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}
